var fs = require('fs');

exports.import = function (vds, config) {
	importKnownAddresses('data/contacts/known_persons.tsv');

	var events = [];

	events = events.concat(importJSON(
		config.inputPath + 'imap/sms.json',
		function (event) { event.type = 'sms' }
	));

	events = events.concat(importJSON(
		config.inputPath + 'imap/calllogs.json',
		function (event) { event.type = 'call' }
	));

	events = events.concat(importJSON(
		config.inputPath + 'imap/vds.json',
		function (event) { event.type = 'mail' }
	));

	var edges = [];

	events = events.map(function (event) {
		var newEvent = {};

		newEvent.subject = event.subject ? event.subject.join(', ') : '';
		newEvent.from    = decodeAddresses(event.from)[0];
		newEvent.to      = decodeAddresses(event.to);
		newEvent.start   = new Date(event.date);
		newEvent.end     = new Date(event.date);

		return newEvent;
	});

	var startDate = new Date(config.timeStart*1000);
	var endDate = new Date(config.timeStart*1000 + config.days*86400000);

	events = events.filter(function (event) {
		if (event.end < startDate) return false;
		if (event.start > endDate) return false;
		return true;
	})

	events.forEach(function (event) {
		event.start = event.start.getTime()/1000;
		event.end   = event.end.getTime()/1000;
	});

	exportUnknownAddresses('data/contacts/unknown_persons.tsv');

	return events;
}

function importJSON(file, cleanupFunction) {
	var data = JSON.parse(fs.readFileSync(file, 'utf8'));
	data.forEach(function (entry) {
		cleanupFunction(entry);
	})
	return data;
}


var unknownAddresses = {};
var knownAddresses = {};

function decodeAddresses(addresses) {
	if (addresses === undefined) return [];

	var cleanAddresses = [];
	addresses.forEach(function (address) {
		address = address.replace(/[\,\n\r]/g, '\t')
		address.split('\t').forEach(function (address) {
			address = address.replace(/^\s+|\s+$/g, ''); // trim
			if (address != '') cleanAddresses.push(address);
		})
	})

	addresses = {};

	cleanAddresses.forEach(function (address) {
		address = address.toLowerCase().replace(/[^a-z0-9@\.\-]/g, '');
		
		knownAddress = knownAddresses[address];
		if (knownAddress) {
			addresses[knownAddress.contact] = knownAddress;
			return
		}

		if (unknownAddresses[address] === undefined) {
			unknownAddresses[address] = {address:address, count:0}
		}
		unknownAddresses[address].count++;

		return;
	});

	addresses = Object.keys(addresses).map(function (key) { return addresses[key] });

	return addresses;
}

function exportUnknownAddresses(file) {
	var csv = Object.keys(unknownAddresses).map(function (key) {
		return [unknownAddresses[key].count, unknownAddresses[key].address];
	})
	csv.sort(function (a,b) {
		return b[0]-a[0];
	})
	csv = csv.map(function (entry) {
		return entry.join('\t');
	})
	fs.writeFileSync(file, csv.join('\n'), 'utf8');
}

function importKnownAddresses(file) {
	knownAddresses = {};

	var rows = fs.readFileSync(file, 'utf8').split('\n');
	var header = rows.shift().split('\t');

	rows.forEach(function (row) {
		row = row.split('\t');
		var obj = {};
		header.forEach(function (colName, index) {
			obj[colName] = row[index];
		})
		obj.cleaned = (obj.cleaned == '1');
		delete obj.count;
		knownAddresses[obj.address] = obj;
	})
}


